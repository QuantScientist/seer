/*
 * combineKmers.cpp
 * Takes the union of kmer counts generated by dsk
 *
 */

// TODO Will need to separate this out into subs and classes
// Class: kmer_union. Contains map and kmer_size. Methods are print and add
// Class: h5_file
//
// Consider transforming bases to a more compact representation
//
// Just use sample index vs. use full sample name
//
// TODO gzip output
// TODO read dsk output directly

#include "combineKmers.hpp"

int main (int argc, char *argv[])
{
   std::vector<std::string> filenames;
   // TODO test only
   // Read file with references and sample names
   filenames.push_back("SE001_dsk.txt");
   filenames.push_back("SE002_dsk.txt");

   // Map to store kmers
   std::unordered_map<std::string, std::vector<std::string> > kmer_union;

   // Add kmers to map
   std::cerr << "Reading and mapping kmers..." << std::endl;
   for (unsigned int i = 0; i < filenames.size(); ++i)
   {
      std::ifstream kmer_counts(filenames[i].c_str());

      std::string kmer, abundance;
      while (kmer_counts)
      {
         kmer_counts >> kmer >> abundance;

         kmer_union[kmer].push_back(filenames[i] + ":" + abundance);
      }
   }

   // Print results
   std::cerr << "Printing union of kmers" << std::endl;
   for(auto it = kmer_union.cbegin(); it != kmer_union.cend(); ++it)
   {
      std::cout << it->first << "\t";
      std::copy(it->second.begin(), it->second.end(), std::ostream_iterator<std::string>(std::cout, " "));
      std::cout << std::endl;
   }

   std::cerr << "Done." << std::endl;

   return(0);
}

